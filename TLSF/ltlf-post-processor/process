#!/bin/bash
# AUTHORS: Guillermo A. Perez + Philipp Meyer + Philipp Schlehuber-Caissier
# DESCRIPTION: The post-processor for synthesis tools on .tlsf benchmarks
#              (Based on Jens Kreber's script) in the LTLf track.
#              This version of the post-processor uses Spot
#              to model check synthesized controllers.
# arg1 = the solver's output (which StarExec saves to a file!, so this is a
#        a file path too)
# arg2 = the absolute path to the benchmark file
# arg3 = the path to the "permanent directory" associated to the pair

syntffull="$1"
origf="$2"
permdir="$3"

# The path to the "run-executable" of spot
mc_checker="./checkltlf"
syfco="./syfco"

syntbasef="$(basename -- $syntffull)"

syntf="nocomments_$syntbasef" # We do not need to keep this
syntcommentf="$permdir/comments_$syntbasef" # We want to keep this

if [ ! -f "$syntffull" ]; then
    echo "Error=No output file found!"
    exit
fi

if [ ! -d "$permdir" ]; then
    echo "Error=Syntcomp outputfolder does not exist"
    exit
fi

# Extension to output format:
# A comment always starts with "c " (like in dimacs)
# and can be either a starexec-value like
# c Algo1_subtime=11.1
# So a key=value pair. key must start with a capital letter (I guess?)
# keys and values are restricted to 128 characters
# Or simple strings
# c YourCommentAsString
# without a character limitation but which must NOT contain a "="
# Starexec-values will be shown in the job-output
# Basic comments are (without the " c"-prefix) copied
# into the job-output

# File without comment
grep -v $'[^\t]*\tc .*' "$syntffull" > "$syntf"

# Bare comments
grep $'[^\t]*\tc .*' "$syntffull" | sed 's/[^\t]*\tc //g' | grep -v "=" > "$syntcommentf"

#Keyword comments -> echoed to console
grep $'[^\t]*\tc .*' "$syntffull" | sed 's/[^\t]*\tc //g' | grep "="

# Getting status from benchmarkfile
syntline=$(grep -n "^[[:space:]]*//[[:space:]]*#!SYNTCOMP" "$origf" | head -n 1 | cut -d ':' -f 1)
if [ -z "$syntline" ]; then
	status="unknown"
else
    synttag=$(tail -n +"$syntline" "$origf")
    status=$(grep "STATUS[[:space:]]*:" <<< "$synttag" | cut -d ':' -f 2 | sed "s/ //g")
fi
echo "Expected_result=$status"

# Check realizability
if (grep -i -q $'.*\tUNREALIZABLE' "$syntf"); then  # the $'...'
    case "$status" in                               # results in \t being
	"realizable")                                   # correctly interpreted
        echo "Error=false negative"
	    exit
	    ;;
	"unrealizable")
        echo "starexec-result=UNREALIZABLE"
	    exit
	    ;;
	"unknown")
        echo "starexec-result=NEW-UNREALIZABLE"
	    exit
	    ;;
	*)
	    echo "Error=Unknown status value"
	    exit
    esac
elif (grep -i -q $'.*\tREALIZABLE' "$syntf"); then
    case "$status" in
	"realizable")
        # do not exit! we have to model check this
	    ;;
	"unrealizable")
        echo "Error=false positive"
	    exit
	    ;;
	"unknown")
        # do not exit! we have to model check this
	    ;;
	*)
	    echo "Error=Unkown status value"
	    exit
    esac
else
    echo "Error=Found neither REALIZABLE nor UNREALIZABLE"
    exit
fi

# Check synthesized file
aagline=$(grep -n $'.*\taag ' "$syntf" | head -n 1 | cut -d ':' -f 1)
if [ -z "$aagline" ]; then
    echo "Error=Could not find aag header."
    exit
fi

# we put all the aag-file lines (without the timestamp) in a file
# IMPORTANT: we keep the lines without the timestamp
eofline=$(grep -n $'.*\tEOF' "$syntf" | head -n 1 | cut -d ':' -f 1)
# if the file is ended with a EOF marker we remove that too
# (F&#@ StarExec adds the EOF, so this is important!)
if [ -z "$eofline" ]; then
    tail -n +"$aagline" "$syntf" | sed $'s/.*\t//' > "${syntf}-sol.aag"
else
    beforeeof=$((eofline-1))
    sed -n "${aagline},${beforeeof}"$'s/.*\t//p' "$syntf" > "${syntf}-sol.aag"
fi

if [ ! -f "${syntf}-sol.aag" ]; then
    echo "Error=The clean solution file was not generated!"
    exit
fi

# Get the specification
formula=$($syfco -f ltlxba-fin -m fully "$origf")
outs=$($syfco -outs "$origf")

# Call the checker
TLIMIT=1000
# TODO: stop hardcoding the above value
timeout -k 10 ${TLIMIT} $mc_checker "${syntf}-sol.aag" "${formula}" "${outs}" 1 2> "${permdir}/ltlfcheckinfo.txt"
res_val=$?

# check result
if [ $res_val -eq 0 ]; then
    # Success
    echo "Model_check_result=SUCCESS"
elif [ $res_val -eq 1 ]; then
    # Incorrect
    echo "starexec-result=MC-INCORRECT"
    echo "Error=model checker says no! Check ltlfcheckinfo.txt"
    exit
elif [ $res_val -eq 124 ] || [ $res_val -eq 137 ]; then
    echo "starexec-result=MC-TIMEOUT"
    exit
else
    echo "starexec-result=MC-ERROR"
    echo "Error=unknown MC error, returned ${res_val}"
    exit
fi

## (Reference) circuit size
size_latches=$(head -n 1 "${syntf}-sol.aag" | cut -d ' ' -f 4)
size_ands=$(head -n 1 "${syntf}-sol.aag" | cut -d ' ' -f 6)

echo "Synthesis_latches=$size_latches"
echo "Synthesis_gates=$size_ands"

size_synt=$(($size_latches + $size_ands))
size_ref=$(grep "REF_SIZE[[:space:]]*:" <<< "$synttag" | cut -d ':' -f 2 | sed "s/ //g")


if [ -n "$size_ref" ]; then
    diff_ref=$((size_synt - size_ref))
    if [ ! "$size_ref" -eq 0 ]; then
	outbyref=$(echo -e "scale=5\n$size_synt / $size_ref\n" | bc -l | sed 's/^\./0./')
    fi
    echo "Difference_to_reference=$diff_ref"
    echo "Output_by_reference=$outbyref"
fi

if [ "$status" == "unknown" ]; then
    echo "starexec-result=NEW-REALIZABLE"
    exit
else
    echo "starexec-result=REALIZABLE"
    exit
fi
