#!/bin/bash
# AUTHORS: Guillermo A. Perez + Philipp Meyer
# DESCRIPTION: The post-processor for synthesis tools on .tlsf benchmarks
#              (Based on Jens Kreber's script). This version of the post-
#              processor uses nuXMV to model check synthesized controllers.
# arg1 = the solver's output (which StarExec saves to a file!, so this is a
#        a file path too)
# arg2 = the absolute path to the benchmark file

syntf="$1"
origf="$2"

if [ ! -f "$syntf" ]; then
    echo "Error=No output file found!"
    exit
fi

syntline=$(grep -n "^[[:space:]]*//[[:space:]]*#!SYNTCOMP" "$origf" | head -n 1 | cut -d ':' -f 1)
if [ -z "$syntline" ]; then
	status="unknown"
else
    synttag=$(tail -n +"$syntline" "$origf")
    status=$(grep "STATUS[[:space:]]*:" <<< "$synttag" | cut -d ':' -f 2 | sed "s/ //g")
fi
echo "Expected_result=$status"

# Check realizability
if (grep -i -q $'.*\tUNREALIZABLE' "$syntf"); then  # the $'...'
    case "$status" in                               # results in \t being
	"realizable")                                   # correctly interpreted
        echo "Error=false negative"
	    exit 
	    ;;
	"unrealizable")
        echo "starexec-result=UNREALIZABLE"
	    exit
	    ;;
	"unknown")
        echo "starexec-result=NEW-UNREALIZABLE"
	    exit
	    ;;
	*)
	    echo "Error=Unknown status value"
	    exit
    esac
elif (grep -i -q $'.*\tREALIZABLE' "$syntf"); then
    case "$status" in
	"realizable")
        # do not exit! we have to model check this
	    ;;
	"unrealizable")
        echo "Error=false positive"
	    exit 
	    ;;
	"unknown")
        # do not exit! we have to model check this
	    ;;
	*)
	    echo "Error=Unkown status value"
	    exit
    esac
else
    echo "Error=Found neither REALIZABLE nor UNREALIZABLE"
    exit
fi

# Check synthesized file
aagline=$(grep -n $'.*\taag ' "$syntf" | head -n 1 | cut -d ':' -f 1)
if [ -z "$aagline" ]; then
    echo "Error=Could not find aag header."
    exit
fi

# we put all the aag-file lines (without the timestamp) in a file
# IMPORTANT: we keep the lines without the timestamp
eofline=$(grep -n $'.*\tEOF' "$syntf" | head -n 1 | cut -d ':' -f 1)
# if the file is ended with a EOF marker we remove that too
# (F&#@ StarExec adds the EOF, so this is important!)
if [ -z "$eofline" ]; then
    tail -n +"$aagline" "$syntf" | sed $'s/.*\t//' > "${syntf}-sol.aag"
else
    beforeeof=$((eofline-1))
    sed -n "${aagline},${beforeeof}"$'s/.*\t//p' "$syntf" > "${syntf}-sol.aag"
fi

if [ ! -f "${syntf}-sol.aag" ]; then
    echo "Error=The clean solution file was not generated!"
    exit
fi

# Generate monitor
./meyerphi-syfco --format smv-decomp "$origf" --mode fully | sed -e "/^/n" | ./smvtoaig -L ./ltl2smv > "monitor.aag"

if [ ! -f "monitor.aag" ]; then
    echo "Error=The monitor file was not generated!"
    exit
fi

# Combine monitor with synthesized file
./combine-aiger "monitor.aag" "${syntf}-sol.aag" > "${syntf}-combined.aag"

if [ ! -f "${syntf}-combined.aag" ]; then
    echo "Error=The combined file was not generated!"
    exit
fi

if ! (head -n 1 "${syntf}-combined.aag" | grep -q '^aag'); then
    echo "Error=during monitor combination"
    exit
fi

# Model checking each justice constraint of the combined file in parallel
num_justice=$(head -n 1 "${syntf}-combined.aag" | cut -d" " -f9);

if [ $num_justice -le 1 ]; then
    # sequential check
    set +e
    echo "read_aiger_model -i ${syntf}-combined.aag; encode_variables; build_boolean_model; check_ltlspec_ic3; quit" | nuXmv -int >"${syntf}-res" 2>&1
    result=$?
    set -e
else
    # parallel check
    set +e
    seq 0 $((num_justice - 1)) | parallel --halt now,fail=1 "echo 'read_aiger_model -i ${syntf}-combined.aag; encode_variables; build_boolean_model; check_ltlspec_ic3 -n {}; quit' | nuXmv -int" >"${syntf}-res" 2>&1
    res_val=$?
    set -e
fi

# check result
if [ $res_val -eq 0 ]; then
    num_true=$(grep -c 'specification .* is true' "${syntf}-res"|| true)
    num_false=$(grep -c 'specification .* is false' "${syntf}-res" || true)
    if [ $num_false -ge 1 ]; then
        echo "starexec-result=MC-INCORRECT"
        echo "Error=model checker says no!"
        exit
    elif [ $num_true -lt $num_justice ]; then
        echo "starexec-result=MC-ERROR"
        echo "Error=not all justice properties found"
        exit
    else
        echo "Model_check_result=SUCCESS"
        # no exit!
    fi
elif [ $res_val -eq 124 ] || [ $res_val -eq 137 ]; then
    echo "starexec-result=MC-TIMEOUT"
    exit
else
    echo "starexec-result=MC-ERROR"
    echo "Error=unknown MC error"
    exit
fi

## (Reference) circuit size
size_latches=$(head -n 1 "${syntf}-sol.aag" | cut -d ' ' -f 4)
size_ands=$(head -n 1 "${syntf}-sol.aag" | cut -d ' ' -f 6)

echo "Synthesis_latches=$size_latches"
echo "Synthesis_gates=$size_ands"

size_synt=$(($size_latches + $size_ands))
size_ref=$(grep "REF_SIZE[[:space:]]*:" <<< "$synttag" | cut -d ':' -f 2 | sed "s/ //g")


if [ -n "$size_ref" ]; then
    diff_ref=$((size_synt - size_ref))
    if [ ! "$size_ref" -eq 0 ]; then
	outbyref=$(echo -e "scale=5\n$size_synt / $size_ref\n" | bc -l | sed 's/^\./0./')
    fi
    echo "Difference_to_reference=$diff_ref"
    echo "Output_by_reference=$outbyref"
fi

if [ "$status" == "unknown" ]; then
    echo "starexec-result=NEW-REALIZABLE"
    exit
else
    echo "starexec-result=REALIZABLE"
    exit
fi
